include std.cn
include platform.cn

#if platform Platform.wat64 ==;
enum JSTypes
  Int String Null Undefined Array Object ExportedFunction
end

struct JSValue
  int type
end

struct (JSValue) JSInt
  int value

  sproc __init__ int:
    JSTypes.Int !self.type
    !self.value
  end

  static proc unwrap JSValue -> JSInt:
    dup .type JSTypes.Int == "Unwrap of JSValue failed, expected JSInt\n" assert
    (JSInt)
  end
end

struct (JSValue) JSString
  int len
  ptr data

  sproc __init__ @str:
    JSTypes.String !self.type
    !self.data !self.len
  end

  sproc value -> @str:
    self.len self.data
  end
  sproc *value -> str:
    *self.len (str)
  end

  static proc unwrap JSValue -> JSString:
    dup .type JSTypes.String == "Unwrap of JSValue failed, expected JSString\n" assert
    (JSString)
  end
end

struct (JSValue) JSNull
  proc __init__:
    JSTypes.Null swap !.type
  end
  
  static proc unwrap JSValue -> JSNull:
    dup .type JSTypes.Null == "Unwrap of JSValue failed, expected JSNull\n" assert
    (JSNull)
  end
end
struct (JSValue) JSUndefined
  proc __init__:
    JSTypes.Undefined swap !.type
  end

  static proc unwrap JSValue -> JSUndefined:
    dup .type JSTypes.Undefined == "Unwrap of JSValue failed, expected JSUndefined\n" assert
    (JSUndefined)
  end
end

struct (JSValue) JSArray
  int length
  [DYNAMIC_ARRAY_SIZE] JSValue value

  sproc __init__ int [DYNAMIC_ARRAY_SIZE] JSValue:
    JSTypes.Array !self.type
    !self.value !self.length
  end

  static proc unwrap JSValue -> JSArray:
    dup .type JSTypes.Array == "Unwrap of JSValue failed, expected JSArray\n" assert
    (JSArray)
  end
end

#import __js_eval cont_runtime.__js_eval @str JSValue -> JSValue;

var __temp_eval_args [6] JSValue
6 __temp_eval_args ([DYNAMIC_ARRAY_SIZE]) JSValue
init var __temp_eval_args_js JSArray
struct (JSValue) JSObject
  int object_id

  proc get @str -> JSValue:
    0 __temp_eval_args *[] !
    init var property JSString
    property 1 __temp_eval_args *[] !
    2 !__temp_eval_args_js.length
    "args[0][args[1]]" __temp_eval_args_js __js_eval
  end
  proc set JSValue @str:
    0 __temp_eval_args *[] !
    init var property JSString
    property 1 __temp_eval_args *[] !
    2 __temp_eval_args *[] !
    3 !__temp_eval_args_js.length
    "args[0][args[1]] = args[2]" __temp_eval_args_js __js_eval .free
  end
  nproc call_method [DYNAMIC_ARRAY_SIZE] JSValue args @str -> JSValue:
    args array_length args init var js_args JSArray
    self 0 __temp_eval_args *[] !
    len data init var property JSString
    property 1 __temp_eval_args *[] !
    js_args 2 __temp_eval_args *[] !
    3 !__temp_eval_args_js.length
    "args[0][args[1]](...args[2])" __temp_eval_args_js __js_eval
  end

  sproc call_method0 @str -> JSValue:
    let len data;
    var args [1] JSValue
    NULL 0 args *[] !
    args ([DYNAMIC_ARRAY_SIZE]) JSValue len data self.call_method
  end
  sproc call_method1 JSValue @str -> JSValue:
    let len data;
    var args [2] JSValue
    0 args *[] !
    NULL 1 args *[] !
    args ([DYNAMIC_ARRAY_SIZE]) JSValue len data self.call_method
  end
  sproc call_method2 JSValue JSValue @str -> JSValue:
    let len data;
    var args [3] JSValue
    1 args *[] !
    0 args *[] !
    NULL 2 args *[] !
    args ([DYNAMIC_ARRAY_SIZE]) JSValue len data self.call_method
  end
  sproc call_method3 JSValue JSValue JSValue @str -> JSValue:
    let len data;
    var args [4] JSValue
    2 args *[] !
    1 args *[] !
    0 args *[] !
    NULL 3 args *[] !
    args ([DYNAMIC_ARRAY_SIZE]) JSValue len data self.call_method
  end
  sproc call_method4 JSValue JSValue JSValue JSValue @str -> JSValue:
    let len data;
    var args [5] JSValue
    3 args *[] !
    2 args *[] !
    1 args *[] !
    0 args *[] !
    NULL 4 args *[] !
    args ([DYNAMIC_ARRAY_SIZE]) JSValue len data self.call_method
  end
  sproc call_method5 JSValue JSValue JSValue JSValue JSValue @str -> JSValue:
    let len data;
    var args [6] JSValue
    4 args *[] !
    3 args *[] !
    2 args *[] !
    1 args *[] !
    0 args *[] !
    NULL 5 args *[] !
    args ([DYNAMIC_ARRAY_SIZE]) JSValue len data self.call_method
  end
  sproc call_method6 JSValue JSValue JSValue JSValue JSValue JSValue @str -> JSValue:
    let len data;
    var args [7] JSValue
    5 args *[] !
    4 args *[] !
    3 args *[] !
    2 args *[] !
    1 args *[] !
    0 args *[] !
    NULL 6 args *[] !
    args ([DYNAMIC_ARRAY_SIZE]) JSValue len data self.call_method
  end

  sproc unwrap_as @str -> JSObject:
    self 0 __temp_eval_args *[] !
    init var string JSString
    string 1 __temp_eval_args *[] !
    2 !__temp_eval_args_js.length
    "args[0] instanceof eval(args[1])" __temp_eval_args_js __js_eval
    JSInt.unwrap dup .value swap .free
    if not do "Unwrap of JSObject failed, expected " puts string.value println end
    self
  end

  static proc unwrap JSValue -> JSObject:
    dup .type JSTypes.Object == "Unwrap of JSValue failed, expected JSObject\n" assert
    (JSObject)
  end
  proc construct [DYNAMIC_ARRAY_SIZE] JSValue @str -> JSObject:
    rot dup array_length swap init var args JSArray
    let data len;
    len 13 + malloc let eval_string;
    "new " eval_string memcpy
    len data eval_string 4 ptr+ memcpy
    "(...args)" len 4 + eval_string +ptr memcpy
    len 13 + eval_string args __js_eval JSObject.unwrap
    eval_string free
  end
end

proc js_exported_proc: end
struct (JSValue) JSExportedFunction
  addr js_exported_proc function

  sproc __init__ addr js_exported_proc:
    JSTypes.ExportedFunction !self.type
    !self.function
  end
end

sproc [JSValue] free:
  if self.type JSTypes.String == do
    self (JSString) .data free
  end
  if self.type JSTypes.Array == do
    var i int
    while i self (JSArray) .length < do
      i self (JSArray) .value [] .free
      *i inc
    end
  end
  if self.type JSTypes.Object == do
    self (JSObject) .object_id init var id JSInt
    "delete serialized_objects[args];" id __js_eval .free
  end
  self free
end

JSTypes.Object 0 init var document JSObject
#endif